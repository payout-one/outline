version: 2
jobs:
  build:
    working_directory: ~/outline
    docker:
      - image: circleci/node:12
      - image: circleci/redis:latest
      - image: circleci/postgres:9.6.5-alpine-ram
    environment:
      NODE_ENV: test
      SECRET_KEY: F0E5AD933D7F6FD8F4DBB3E038C501C052DC0593C686D21ACB30AE205D2F634B
      DATABASE_URL_TEST: postgres://root@localhost:5432/circle_test
      DATABASE_URL: postgres://root@localhost:5432/circle_test
      URL: http://localhost:3000
      SMTP_FROM_EMAIL: hello@example.com
      AWS_S3_UPLOAD_BUCKET_URL: https://s3.amazonaws.com
      AWS_S3_UPLOAD_BUCKET_NAME: outline-circle
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-deps
          command: yarn install --pure-lockfile
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: migrate
          command: ./node_modules/.bin/sequelize db:migrate --url $DATABASE_URL_TEST
      - run:
          name: test
          command: yarn test
      - run:
          name: lint
          command: yarn lint
      - run:
          name: flow
          command: yarn flow
      - restore_cache:
          keys:
            - v2-{{ .Branch }}
          paths:
            - caches/$CIRCLE_PROJECT_REPONAME.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i caches/$CIRCLE_PROJECT_REPONAME.tar | true
      - run:
          name: Build Docker image
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker build -f Dockerfile.production --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg BUILD_VERSION=v0.37.0.$CIRCLE_BUILD_NUM --build-arg HEX_KEY=$HEX_KEY -t payout1/$CIRCLE_PROJECT_REPONAME:v0.37.0.$CIRCLE_BUILD_NUM .
      - restore_cache:
          keys:
            - v2-clair
          paths:
            - caches/clair.tar
      - run:
          name: Load Clair image layer cache
          command: |
            set +o pipefail
            docker load -i caches/clair.tar | true
      - run:
          name: Clair Docker containers vulnerability scan
          command: ./payout_clair.sh payout1/$CIRCLE_PROJECT_REPONAME:v0.37.0.$CIRCLE_BUILD_NUM
      - run:
          name: Save Clair Docker Image
          command: |
            mkdir -p caches
            docker save -o caches/clair.tar arminc/clair-db:latest
      - save_cache:
          key: v2-clair-{{ epoch }}
          paths:
            - caches/$CIRCLE_PROJECT_REPONAME.tar
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p caches
            docker tag payout1/$CIRCLE_PROJECT_REPONAME:v0.37.0.$CIRCLE_BUILD_NUM payout1/$CIRCLE_PROJECT_REPONAME:latest
            docker save -o caches/$CIRCLE_PROJECT_REPONAME.tar payout1/$CIRCLE_PROJECT_REPONAME:v0.37.0.$CIRCLE_BUILD_NUM
      - save_cache:
          key: v2-{{ .Branch }}-{{ epoch }}
          paths:
            - caches/$CIRCLE_PROJECT_REPONAME.tar
      - deploy:
          name: Push to DockerHub
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker push payout1/$CIRCLE_PROJECT_REPONAME:v0.37.0.$CIRCLE_BUILD_NUM
      - opsgenie/notify